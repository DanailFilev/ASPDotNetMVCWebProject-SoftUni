@using BookStore.Data.Models
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserService UserService

@{
	string userFullName = await UserService.GetFullNameByEmailAsync(User.Identity?.Name!);
}

<ul class="navbar-nav">
	@if (SignInManager.IsSignedIn(User))
	{
		<li class="nav-item">
			<a class="nav-link text-dark" asp-area="" asp-controller="Cart" asp-action="Index">
				<span id="cartItemCount" class="badge badge-custom" style="background-color: white; visibility: visible; color: black">@TempData["CartItemCount"]</span>
				<i class="bi bi-cart"></i>
			</a>
		</li>
		<li class="nav-item">
			<a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello, @userFullName</a>
		</li>
		<li class="nav-item">
			<form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
				<button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
			</form>
		</li>
	}
	else
	{
		<li class="nav-item" title="View Cart">
			<a class="nav-link text-dark" href="javascript:void(0);" onclick="redirectToLogin()">
				<span id="cartItemCount" class="badge badge-custom" style="background-color: white; visibility: visible; color: black">@TempData["CartItemCount"]</span>
				<i class="bi bi-cart"></i>
			</a>
		</li>
		<li class="nav-item">
			<a class="nav-link text-dark" asp-area="" asp-controller="User" asp-action="Register">Register</a>
		</li>
		<li class="nav-item">
			<a class="nav-link text-dark" asp-area="" asp-controller="User" asp-action="Login">Login</a>
		</li>
	}
</ul>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
	// Function to update cart quantity using AJAX
	function updateCartQuantity() {
		// Check if the user is logged in (you may need to adjust this condition based on your authentication logic)
		var isAuthenticated = @(SignInManager.IsSignedIn(User) ? "true" : "false");

		if (isAuthenticated) {
			// User is logged in, execute the AJAX request to get the cart quantity
			$.ajax({
				url: '/Cart/GetCartQuantity',
				type: 'GET',
				success: function (data) {
					console.log('AJAX response:', data);
					var itemCount = data.cartItemCount || 0;
					$('#cartItemCount').text('(' + itemCount + ')');
				},
				error: function () {
					console.error('Failed to get cart quantity.');
				}
			});
		} else {
			// User is not logged in, you may choose to handle this case differently or do nothing
		}
	}

	// Function to redirect to login page
	function redirectToLogin() {
		var returnUrl = '@Url.Action("Index", "Cart", new { area = "" })';
		var loginUrl = '@Url.Action("Login", "User")' + '?returnUrl=' + encodeURIComponent(returnUrl);

		window.location.href = loginUrl;
	}

	// Call the function when the page loads or after cart updates
	$(document).ready(function () {
		updateCartQuantity();

		// Optionally, set up an interval to periodically update the badge
		setInterval(updateCartQuantity, 30000); // Update every 30 seconds (adjust as needed)
	});

	// Call the function when the page loads
	document.addEventListener('DOMContentLoaded', updateCartQuantity);
</script>
